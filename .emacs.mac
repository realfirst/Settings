;; -*- mode: Lisp;-*-

;; (setenv "PATH" (concat (getenv "PATH")))
;; (setq exec-path (append exec-path '("/usr/local/bin" )))
(setq ORG_HOME "~/Dropbox/Org")
(setq use-org-mode t
      use-git-mode t
      use-jdee t
      use-tabbar t)
(load-file (expand-file-name "~/Work/Settings/Emacs/emacs.el"))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode t)
 '(column-number-mode t)
 '(jde-jdk-registry (quote (("1.6.0" . "/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0"))))
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; ----------------------------------------------------------------------
;; Set English/Chinese font.
;; ----------------------------------------------------------------------
(setq ns-antialias-text nil)
(when window-system
  (progn
    (set-default-font "-apple-Ubuntu_Mono-medium-normal-normal-*-15-*-*-*-m-0-iso10646-1")
    ;; (set-default-font "-apple-Lucida_Sans_Typewriter-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
    ;; (set-default-font "-apple-Monaco-medium-r-normal--13-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-Menlo-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")

    ;; Set chinese font.
    ;; (set-fontset-font (frame-parameter nil 'font)
    ;;                   'han '("AR_PL_UMing_TW" . "unicode-bmp"))
    (set-fontset-font "fontset-default"
                      'han '("MingLan" . "unicode-bmp"))
    ))

;; ----------------------------------------------------------------------
;; MacOS-specific settings
;; ----------------------------------------------------------------------
(message "[MacOS] Loading MacOS-specific settings...")

(setq shift-select-mode t
      line-move-visual t
      locate-command 'mdfind)

(when window-system
  (menu-bar-mode 1))

;; (remove-hook 'before-save-hook 'delete-trailing-whitespace)

;; --------------------------------------------------
;; Different things between Aquamacs & Emacs
;; --------------------------------------------------
;; Define a variable to determine if I'm running Aquamacs
(defvar aquamacs-p (string-match "Aquamacs" (version)))

;; Override the [home] & [end] bindings
(if (featurep 'aquamacs)
  (progn
    (define-key osx-key-mode-map (kbd "<home>") 'beginning-of-line)
    (define-key osx-key-mode-map (kbd "<end>") 'end-of-line)

    (setq ispell-program-name "/usr/local/bin/aspell")
    )
  (progn
    (global-set-key [home] 'beginning-of-line)
    (global-set-key [end] 'end-of-line)
    ))

(when (featurep 'aquamacs)
    (progn
      ;;
      (setq custom-file "~/.emacs")
      (tabbar-mode nil)

      ;; Use the same font for all modes
      (aquamacs-autoface-mode nil)

      ;; restore classic Emacs selection behavior
      (cua-mode 0)
      (transient-mark-mode 1)

      ;; Open buffers in the same frame
      (one-buffer-one-frame-mode 0)

      ;; Use 'open' command in Dired mode
      (defun dired-open-mac ()
        (interactive)
        (let ((file-name (dired-get-file-for-visit)))
          (if (file-exists-p file-name)
              (call-process "/usr/bin/open" nil 0 nil file-name))))
      ;; (define-key dired-mode-map "o" 'dired-open-mac)
     ))
